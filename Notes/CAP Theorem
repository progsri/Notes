
Setup#
1. Has 2 servers for simplicity ( it can have more than 2 servers )
2. Both the servers can be communicated via HTTP for read and writes by the client.
3. The servers internally communicate over TCP/IP.
4. If one server gets a write call from a client, it would replicate that to the second server and only when the second server 
acknowledges back, the client get's back the success response.

Let consider the elements for this distributed system.
1. Availabilty # client should be able to communicate any of the server(s) and it should get back a response.
2. Consistency # irrespective of the server the client communicates with, the data received should be the same from any server.
3. Network Partition Tolerance # The cluster or setup should be alive even if the 2 servers are not able to contact each other 
  over the network.
  
Scenario 1 ( Maintain Availabilty if the network partion occurs )
Availability can be achieved, however if the clients communicate with any of the server then the new data cannot be replicated
to other server due to network partition which mean consistency cannot be achieved.
So if network partition occurs then consistency cannot be achieved.

Scenario 2 ( Maintain Consistency even if the network partion occurs )
To maintain consistency when network partition occurs, the cluster cannot be available to clients.


Needs further research #  
Cassandra maintains availability when there is a netwrok partitions, however it said to do eventual consistency...which means 
certains servers which do not get updated in the cluster would have stale(old) data. 

   
Reference#
https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/
